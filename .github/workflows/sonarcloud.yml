name: SonarCloud Scan

# Triggers the workflow on push events to the main branch
# and on pull requests targeting the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  sonarcloud:
    name: Build and Analyze
    runs-on: ubuntu-latest
    
    # Required to fetch the code and history
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch depth 0 is recommended for accurate SCM and Git blame information
          fetch-depth: 0 

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven' # Change 'maven' if you use a different build tool (e.g., 'gradle')

      # ðŸ›‘ CRITICAL STEP: Consolidated Analysis and Quality Gate Check
      # The "-Dsonar.qualitygate.wait=true" flag here makes a separate check step unnecessary.
      - name: SonarQube Analysis
        # Using the stable tag @v3 to avoid the SHA download error
        uses: SonarSource/sonarqube-scan-action@v3 
        env:
          # These secrets must be defined in your GitHub repository settings
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          # Pass arguments directly to the scanner
          args: >
            -Dsonar.projectKey=jeshualexi_essiem 
            -Dsonar.organization=jeshualexi
            -Dsonar.sources=.
            -Dsonar.qualitygate.wait=true # This is what checks the Quality Gate status
            -Dsonar.scm.disabled=true # Ensures CI Analysis overrides Automatic Analysis

      # ðŸ›‘ SOOS Software Composition Analysis (SCA)
      # You should secure this action with a full SHA later, but for now, we use @v2
      - name: SOOS Software Composition Analysis (SCA)
        uses: soos-io/soos-sca-github-action@v2 

      # ðŸ›‘ NOTE: The old separate Quality Gate Check step is REMOVED.
      # The analysis step above now handles the Quality Gate status check.

      # --- This is where any subsequent build or deployment steps would go ---
